#!/usr/bin/python

import subprocess as sp
import json

TESTING_REPO = ""
GITHUB_REPO = ""

def run_cmd(cmd):
    proc = sp.Popen(cmd,
                    stdout=sp.PIPE,
                    stderr=sp.PIPE,
                    shell=True)
    output, errmsg = proc.communicate()
    return_code = proc.returncode
    return (output, errmsg, return_code)

def err_found(errmsg, event):
    print("Take the control.."
          " ERROR FOUND during - '%s'" % event)
    print("[ERROR] : %s" % errmsg)
    exit(1)

def remote_verbose(event):
    verbose_cmd = "git remote -v"
    (output, errmsg, return_code) = run_cmd(verbose_cmd)
    if return_code == 0:
        current_target = output.split()[1]
        print("[Success] : Found %s Target" % event)
        print(" %s Repository : %s" % (event.capitalize(), current_target))
        return current_target
    else:
        err_found(errmsg, "remote verbose")
    return None

def rm_origin():
    rm_origin_cmd = "git remote remove origin"
    (output, errmsg, return_code) = run_cmd(rm_origin_cmd)
    if return_code != 0:
        err_found(errmsg, "remove origin")
    else:
        print("[Success] : Origin removed")
    return

def add_origin(repo):
    add_origin_cmd = "git remote add origin %s" % repo
    (output, errmsg, return_code) = run_cmd(add_origin_cmd)
    if return_code != 0:
        err_found(errmsg, 'add origin')
    else:
        print("[Success] : Origin Added")
    return

def main():
    current_target = remote_verbose("Old")
    rm_origin()
    if current_target == TESTING_REPO:
        print("Dev Environment was in TESTING..!")
        print("Switching over to GITHUB..!")
        add_origin(GITHUB_REPO)
    else:
        print("Dev Environment was in GITHUB..!")
        print("Switching over to TESTING..!")
        add_origin(TESTING_REPO)
    remote_verbose("New")

if __name__ == "__main__":
    print("RETARGETTING .. \n")
    main()